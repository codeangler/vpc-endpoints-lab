AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  VPC Endpoints Lab - v2.5
Mappings: 
  RegionMap: 
    us-east-1: 
      "AZ1" : "us-east-1a" 
      "AZ2" : "us-east-1b"
    us-east-2: 
      "AZ1" : "us-east-2a" 
      "AZ2" : "us-east-2b"
    us-west-1: 
      "AZ1" : "us-west-1a" 
      "AZ2" : "us-west-1b"
    us-west-2: 
      "AZ1" : "us-west-2a" 
      "AZ2" : "us-west-2b"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Event Engine Lab Environment ?
        Parameters:
          - EventEngine
      - Label:
          default: Network Configuration
        Parameters:
          - VPCCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnetTag1
          - PublicSubnetTag2
          - PrivateSubnet1ACIDR
          - PrivateSubnet2ACIDR
          - PrivateSubnetATag1
          - PrivateSubnetATag2
          - VPCTenancy
    ParameterLabels:
      EventEngine:
        default: Choose true if the Lab will be run using the AWS Event Engine Lab Platform
      PrivateSubnet1ACIDR:
        default: Private subnet 1A CIDR
      PrivateSubnet2ACIDR:
        default: Private subnet 2A CIDR
      PrivateSubnetATag1:
        default: Tag for Private A Subnets
      PrivateSubnetATag2:
        default: Tag for Private A Subnets
      PublicSubnet1CIDR:
        default: Public subnet 1 CIDR
      PublicSubnet2CIDR:
        default: Public subnet 2 CIDR
      PublicSubnetTag1:
        default: Tag for Public Subnets
      PublicSubnetTag2:
        default: Tag for Public Subnets
      VPCCIDR:
        default: VPC CIDR
      VPCTenancy:
        default: VPC Tenancy
Parameters:
  EventEngine:
    Description: 'Parameter indicating if this script will be run using Event Engine'
    Type: 'String'
    Default: 'true'
    AllowedValues: [true,false]
  AppName1:
    Description: Name to be used with EC2 Instance, Role, and Security Group
    Type: 'String'
    Default: 'salesapp'
  AppName2:
    Description: Name to be used with EC2 Instance, Role, and Security Group
    Type: 'String'
    Default: 'reportsengine'
  PrivateSubnet1ACIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.1.0/24
    Description: CIDR block for private subnet 1A located in Availability Zone 1
    Type: String
  PrivateSubnet2ACIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.2.0/24
    Description: CIDR block for private subnet 2A located in Availability Zone 2
    Type: String
  PrivateSubnetATag1:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: Network=Private
    Description: tag to add to private subnets A, in format Key=Value (Optional)
    Type: String
  PrivateSubnetATag2:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to private subnets A, in format Key=Value (Optional)
    Type: String
  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.3.0/25
    Description: CIDR block for the public DMZ subnet 1 located in Availability Zone
      1
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.4.0/25
    Description: CIDR block for the public DMZ subnet 2 located in Availability Zone
      2
    Type: String
  PublicSubnetTag1:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: Network=Public
    Description: tag to add to public subnets, in format Key=Value (Optional)
    Type: String
  PublicSubnetTag2:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to public subnets, in format Key=Value (Optional)
    Type: String
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String
  VPCTenancy:
    AllowedValues:
      - default
      - dedicated
    Default: default
    Description: The allowed tenancy of instances launched into the VPC
    Type: String
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs'
  ModuleName:
    Description: The name of the JavaScript file 
    Type: String
    Default: index #modulename identifies the name of the javascript file in the custom function
  S3Key:
    Description: Key to the Lambda ZIP package (kept in the event engine assets public bucket)
    Type: String
    Default: modules/7dbaeba0ef084e64a3566ebed6cb8bd2/v1/keypaircreatecustomresourcefunction.zip
Conditions:
  EventEngineCondition: !Equals  #Compares if two values are equal. 
  # Returns true if the two values are equal or false if they aren't.
    - !Ref 'EventEngine'
    - 'true'
  NVirginiaRegionCondition: !Equals
    - !Ref 'AWS::Region'
    - us-east-1
  PrivateSubnetATag1Condition: !Not
    - !Equals
      - !Ref 'PrivateSubnetATag1'
      - ''
  PrivateSubnetATag2Condition: !Not
    - !Equals
      - !Ref 'PrivateSubnetATag2'
      - ''
  PublicSubnetTag1Condition: !Not
    - !Equals
      - !Ref 'PublicSubnetTag1'
      - ''
  PublicSubnetTag2Condition: !Not
    - !Equals
      - !Ref 'PublicSubnetTag2'
      - ''
Resources:
  #vpc 
  DHCPOptions:  #the DHCP Option set for the VPC
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !If
        - NVirginiaRegionCondition
        - ec2.internal  #If we are in the NV region, use ec2.internal for DNS
        - !Sub '${AWS::Region}.compute.internal' # otherwise use region.compute.internal
      DomainNameServers:
        - AmazonProvidedDNS
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VPCCIDR'
      InstanceTenancy: !Ref 'VPCTenancy'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref 'VPC'
      DhcpOptionsId: !Ref 'DHCPOptions'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PrivateSubnet1A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet1ACIDR'
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", AZ1]
      Tags:
        - Key: Name
          Value: Private subnet 1A
        - !If
          - PrivateSubnetATag1Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PrivateSubnetATag1'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PrivateSubnetATag1'
          - !Ref 'AWS::NoValue'
        - !If
          - PrivateSubnetATag2Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PrivateSubnetATag2'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PrivateSubnetATag2'
          - !Ref 'AWS::NoValue'
  PrivateSubnet2A:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PrivateSubnet2ACIDR'
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", AZ2]
      Tags:
        - Key: Name
          Value: Private subnet 2A
        - !If
          - PrivateSubnetATag1Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PrivateSubnetATag1'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PrivateSubnetATag1'
          - !Ref 'AWS::NoValue'
        - !If
          - PrivateSubnetATag2Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PrivateSubnetATag2'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PrivateSubnetATag2'
          - !Ref 'AWS::NoValue'
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PublicSubnet1CIDR'
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", AZ1]
      Tags:
        - Key: Name
          Value: Public subnet 1
        - !If
          - PublicSubnetTag1Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag1'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag1'
          - !Ref 'AWS::NoValue'
        - !If
          - PublicSubnetTag2Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag2'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag2'
          - !Ref 'AWS::NoValue'
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'PublicSubnet2CIDR'
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", AZ2]
      Tags:
        - Key: Name
          Value: Public subnet 2
        - !If
          - PublicSubnetTag1Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag1'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag1'
          - !Ref 'AWS::NoValue'
        - !If
          - PublicSubnetTag2Condition
          - Key: !Select
              - '0'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag2'
            Value: !Select
              - '1'
              - !Split
                - '='
                - !Ref 'PublicSubnetTag2'
          - !Ref 'AWS::NoValue'
  PrivateSubnet1ARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Private subnet 1A
        - Key: Network
          Value: Private
  PrivateSubnet1ARoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnet1ARouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway1'
  PrivateSubnet1ARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet1A'
      RouteTableId: !Ref 'PrivateSubnet1ARouteTable'
  PrivateSubnet2ARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Private subnet 2A
        - Key: Network
          Value: Private
  PrivateSubnet2ARoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnet2ARouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway2'
  PrivateSubnet2ARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet2A'
      RouteTableId: !Ref 'PrivateSubnet2ARouteTable'
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public
  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  NAT1EIP:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT2EIP:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGateway1:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NAT1EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet1'
  NATGateway2:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NAT2EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet2'
  #endpoints
  S3VPCGatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: '*'
            Effect: Allow
            Resource: '*'
            Principal: '*'
      RouteTableIds:
        - !Ref 'PrivateSubnet1ARouteTable'
        - !Ref 'PrivateSubnet2ARouteTable'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref 'VPC'
  InterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties: 
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !Ref InterfaceSecurityGroup
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref "AWS::Region"
          - .sqs
      SubnetIds: 
        - !Ref PrivateSubnet1A
        - !Ref PrivateSubnet2A
      VpcEndpointType: Interface  
      VpcId: !Ref VPC
  InterfaceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Controls Inbound Access to the VPC Interface Endpoint from within the VPC'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - FromPort: '0'
          ToPort: '65535'
          IpProtocol: tcp
          CidrIp: 10.0.0.0/8
          #  SourceSecurityGroupId: String
      Tags:
        - Key: Name
          Value: 'Interface-Endpoint-Security-Group'
  #salesapp
  EC2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref LatestAmiId 
      KeyName: vpce
      IamInstanceProfile: !Ref InstanceProfile1
      SubnetId: !Ref PrivateSubnet1A
      SecurityGroupIds:
        - !Ref SecurityGroup1
      Tags:
        - Key: Name 
          Value: !Sub '${AWS::StackName}-${AWS::Region}-${AppName1}-ec2'
    DependsOn : [ "Cloud9Instance" ]
  SecurityGroup1:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AWS::StackName}-${AWS::Region}-${AppName1}-security-group'
      GroupDescription: 'Inbound SSH Access from within the VPC'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - FromPort: '22'
          ToPort: '22'
          IpProtocol: tcp
          CidrIp: 10.0.0.0/8
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-${AWS::Region}-${AppName1}-security-group'
  InstanceProfile1:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Sub '${AWS::StackName}-${AWS::Region}-${AppName1}-instanceprofile'
      Path: /vpcelab/
      Roles:
        - !Ref IAMRole1
  IAMPolicy1:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-${AppName1}-sqs-access-policy'
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Action:
              - "sqs:SendMessage"
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
              - "sqs:GetQueueUrl"
              - "sqs:GetQueueAttributes"
              - "sqs:ListQueues"
              - "sqs:ListQueueTags"
            Resource: !GetAtt
                        - SQSQueue
                        - Arn
      Roles:
        - !Ref IAMRole1
  IAMPolicy1a:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-${AppName1}-s3-access-policy'
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 's3:ListAllMyBuckets'
            Resource: !Sub 'arn:aws:s3:::*'
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource: !Sub 'arn:aws:s3:::${RestrictedS3Bucket}/*'
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource: !Sub 'arn:aws:s3:::${UnrestrictedS3Bucket}/*'
      Roles:
      - !Ref IAMRole1
  IAMRole1:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-${AWS::Region}-${AppName1}-role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /vpcelab/
  #reportsengine    
  EC2Instance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref LatestAmiId 
      KeyName: vpce
      IamInstanceProfile: !Ref InstanceProfile2
      SubnetId: !Ref PrivateSubnet2A
      SecurityGroupIds:
        - !Ref SecurityGroup2
      Tags:
        - Key: Name 
          Value: !Sub '${AWS::StackName}-${AWS::Region}-${AppName2}-ec2'        
    DependsOn : [ "Cloud9Instance" ]
  SecurityGroup2:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AWS::StackName}-${AWS::Region}-${AppName2}-security-group'
      GroupDescription: 'Inbound SSH Access from within the VPC'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - FromPort: '22'
          ToPort: '22'
          IpProtocol: tcp
          CidrIp: 10.0.0.0/8
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-${AWS::Region}-${AppName2}-security-group'
  InstanceProfile2:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Sub '${AWS::StackName}-${AWS::Region}-${AppName2}-instanceprofile'
      Path: /vpcelab/
      Roles:
        - !Ref IAMRole2
  IAMPolicy2:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-${AppName2}-sqs-access-policy'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
              - "sqs:GetQueueUrl"
              - "sqs:GetQueueAttributes"
              - "sqs:ListQueues"
            Resource: !GetAtt
              - SQSQueue
              - Arn
      Roles:
        - !Ref IAMRole2
  IAMPolicy2a:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-${AppName2}-s3-access-policy'
      PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 's3:ListAllMyBuckets'
            Resource: !Sub 'arn:aws:s3:::*'
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource: !Sub 'arn:aws:s3:::${RestrictedS3Bucket}/*'
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource: !Sub 'arn:aws:s3:::${UnrestrictedS3Bucket}/*'
      Roles:
        - !Ref IAMRole2
  IAMRole2:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-${AWS::Region}-${AppName2}-role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /vpcelab/    
  #sqsqueue
  SQSQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Sub '${AWS::StackName}-${AWS::Region}-sqs-queue'
  #buckets   
  UnrestrictedS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::AccountId}-${AWS::StackName}-${AWS::Region}-unrestrictedbucket'
      AccessControl: 'Private' 
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          -
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  #bucket is named with acctid-stackname-region-unrestrictedbucket - globally unique
  RestrictedS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::AccountId}-${AWS::StackName}-${AWS::Region}-restrictedbucket'
      AccessControl: 'Private'  
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          -
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  #bucket is named with acctid-stackname-region-restrictedbucket - globally unique
  #cloud9 
  Cloud9Instance:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties: 
      AutomaticStopTimeMinutes: 180
      Description: 'Cloud9 instance used to validate vpc endpoint controls in lab'
      InstanceType: t2.micro
      Name:  !Sub '${AWS::StackName}-vpc-endpoints-lab' 
      SubnetId: !Ref PublicSubnet1
      # OwnerArn: !Sub 'arn:aws:iam::${AWS::AccountId}:assumed-role/TeamRole/MasterKey'
      # If EventEngineCondition is true, make the EE assumed role the Cloud9 owner, else don't worry
      OwnerArn: !If [EventEngineCondition,!Sub 'arn:aws:iam::${AWS::AccountId}:assumed-role/TeamRole/MasterKey',!Ref 'AWS::NoValue']
    DependsOn : [ "keypair" ]
  #ssh key via custom resource
  keypair:
    Type: Custom::keypair
    Properties:
      ServiceToken: !GetAtt 'keypairFunction.Arn'
      Region: !Ref 'AWS::Region'
      keypairName: vpce 
  keypairFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub 'ee-assets-prod-${AWS::Region}'   
        # ee-assets-prod-us-west-2 if we are in us-west-2
        # ee-assets-prod-us-east-1 if we are in us-east-1
        S3Key: !Ref 'S3Key'
      Handler: !Join
        - ''
        - - !Ref 'ModuleName'
          - .handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: nodejs12.x
      Timeout: '60'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: lambdacustomresourcepolicyfork
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:CreateKeyPair
                  - ec2:DeleteKeyPair
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                  - ssm:GetParameterHistory
                  - ssm:GetParametersByPath
                  - ssm:GetParameters
                  - ssm:GetParameter
                  - ssm:DeleteParameters
                Resource: arn:aws:ssm:*:*:parameter/*
  SalesAppIPSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Description: 'Sales EC2 Instance'
      Name: salesappip
      Type: String
      Value: !GetAtt EC2Instance1.PrivateIp 
  ReportsEngineIPSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Description: 'Report Engine EC2 Instance'
      Name: reportsengineip
      Type: String
      Value: !GetAtt EC2Instance2.PrivateIp
Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  VPCID:
    Value: !Ref 'VPC'
    Description: VPC ID
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'
  Cloud9Instance:
    Value: !Ref 'Cloud9Instance'
    Description: Cloud9Instance
    Export:
      Name: !Sub '${AWS::StackName}-Cloud9Instance'
  Cloud9InstanceURL:
    Description: 'URL to Access Cloud9 lab instance'
    Value: !Join 
      - ''
      - - 'https://' 
        - !Sub '${AWS::Region}' 
        - '.console.aws.amazon.com/cloud9/ide/'
        - !Ref 'Cloud9Instance'
    Export:
      Name: !Sub '${AWS::StackName}-Cloud9InstanceURL'
  EC2Instance1IP:
    Description: 'IP Address for SalesApp'
    Value: !GetAtt EC2Instance1.PrivateIp 
    Export:
      Name: 'SalesAppIP' 
  SSHtoSalesApp:
    Description: 'SSH string to connect to the sales app EC2 instance'
    Value: !Join 
      - ''
      - - ssh ec2-user@
        - !GetAtt 
          - EC2Instance1 
          - PrivateIp 
        - ' -i '
        - !Sub '${AWS::StackName}'
        - '.pem'
    Export: 
      Name: !Sub '${AWS::StackName}-An-SSH-string-to-connect-to-sales-app'
  EC2Instance2IP:
    Description: 'IP Address for ReportsEngine'
    Value: !GetAtt EC2Instance2.PrivateIp 
    Export:
      Name: 'ReportsEngineIP' 
  SSHtoReportsEngine:
    Description: 'SSH string to connect to the sales app EC2 instance'
    Value: !Join 
      - ''
      - - ssh ec2-user@
        - !GetAtt 
          - EC2Instance2 
          - PrivateIp 
        - ' -i '
        - !Sub '${AWS::StackName}'
        - '.pem'
    Export: 
      Name: !Sub '${AWS::StackName}-An-SSH-string-to-connect-to-reports-engine'    
  S3VPCGatewayEndpoint:
    Description: S3 VPC Endpoint
    Value: !Ref 'S3VPCGatewayEndpoint'
    Export:
      Name: !Sub '${AWS::StackName}-S3VPCGatwayEndpoint'
  UnrestrictedS3Bucket:
    Description: UnrestrictedS3Bucket
    Value: !Ref 'UnrestrictedS3Bucket'
    Export:
      Name: !Sub '${AWS::StackName}-UnrestrictedS3Bucket'
  UnrestrictedS3BucketPermsURL:
    Description: UnrestrictedS3BucketPermsURL
    Value: !Join 
      - ''
      - - 'https://s3.console.aws.amazon.com/s3/buckets/'
        - !Ref UnrestrictedS3Bucket
        - '/?region='
        - !Sub ${AWS::Region}
        - '&tab=permissions'
    Export:
      Name: !Sub '${AWS::StackName}-UnrestrictedS3BucketPermsURL'
  RestrictedS3Bucket:
    Description: RestrictedS3Bucket
    Value: !Ref 'RestrictedS3Bucket'
    Export:
      Name: !Sub '${AWS::StackName}-RestrictedS3Bucket'
  RestrictedS3BucketPermsURL:
    Description: RestrictedS3BucketPermsURL
    Value: !Join 
      - ''
      - - 'https://s3.console.aws.amazon.com/s3/buckets/'
        - !Ref RestrictedS3Bucket
        - '/?region='
        - !Sub ${AWS::Region}
        - '&tab=permissions'
    Export:
      Name: !Sub '${AWS::StackName}-RestrictedS3BucketPermsURL'
  IAMRoleForSalesApp:
    Description: IAMRoleForSalesApp
    Value: !Ref 'IAMRole1'
    Export:
      Name: !Sub '${AWS::StackName}-IAMRoleForSalesApp' 
  IAMRoleForSalesAppURL:
    Description: IAMRoleForSalesAppURL
    Value: 
    Value: !Join 
      - ''
      - - 'https://console.aws.amazon.com/iam/home?region='
        - !Sub ${AWS::Region} 
        - '#/roles/'
        - !Ref IAMRole1 
    Export:
      Name: !Sub '${AWS::StackName}-IAMRoleForSalesAppURL'
  IAMRoleForReportsEngine:
    Description: IAMRoleForReportsEngine
    Value: !Ref 'IAMRole2'
    Export:
      Name: !Sub '${AWS::StackName}-IAMRoleForReportsEngine'    
  IAMRoleForReportsEngineURL:
    Description: IAMRoleForReportsEngineURL
    Value: 
    Value: !Join 
      - ''
      - - 'https://console.aws.amazon.com/iam/home?region='
        -  !Sub ${AWS::Region} 
        - '#/roles/'
        - !Ref IAMRole2
    Export:
      Name: !Sub '${AWS::StackName}-IAMRoleForReportsEngineURL' 
  SecurityGroupForSalesApp:
    Description: SecurityGroupForSalesApp
    Value: !Ref 'SecurityGroup1'
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupForSalesApp'
  SecurityGroupForSalesAppURL:
    Description: SecurityGroupForSalesAppURL
    Value: !Join 
      - ''
      - - 'https://' 
        - !Sub ${AWS::Region} 
        - '.console.aws.amazon.com/ec2/home?region='
        - !Sub ${AWS::Region}
        - '#SecurityGroups:search='
        - !Ref SecurityGroup1
        - ';sort=groupName'
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupForSalesAppURL' 
  SecurityGroupForReportsEngine:
    Description: SecurityGroupForReportsEngine
    Value: !Ref 'SecurityGroup2'
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupForReportsEngine'
  SecurityGroupForReportsEngineURL:
    Description: SecurityGroupForSalesAppURL
    Value: !Join 
      - ''
      - - 'https://'
        - !Sub ${AWS::Region}  
        - '.console.aws.amazon.com/ec2/home?region=' 
        - !Sub ${AWS::Region} 
        - '#SecurityGroups:search='
        - !Ref SecurityGroup2
        - ';sort=groupName'
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupForReportsEngineURL' 
  InterfaceSecurityGroupURL:
    Description: InterfaceSecurityGroupURL
    Value: !Join 
      - ''
      - - 'https://'
        - !Sub '${AWS::Region}' 
        - '.console.aws.amazon.com/ec2/home?region='
        - !Sub ${AWS::Region} 
        - '#SecurityGroups:search='
        - !Ref InterfaceSecurityGroup
        - ';sort=groupName'
    Export:
      Name: !Sub '${AWS::StackName}-InterfaceSecurityGroupURL' 
  InterfaceEndpointPolicyURL:
    Description: InterfaceEndpointPolicyURL
    Value: !Join 
      - ''
      - - 'https://'
        - !Sub '${AWS::Region}' 
        - '.console.aws.amazon.com/vpc/home?region='
        - !Sub ${AWS::Region} 
        - '#Endpoints:search='
        - !Ref InterfaceEndpoint
        - ';sort=vpcEndpointId'
    Export:
      Name: !Sub '${AWS::StackName}-InterfaceEndpointPolicyURL'
  SQSQueueName:
    Description: Name newly created SQS Queue
    Value: !GetAtt
      - SQSQueue
      - QueueName
    Export:
      Name: !Sub '${AWS::StackName}-SQSQueueName'
  SQSQueueARN:
    Description: ARN of newly created SQS Queue
    Value: !GetAtt
      - SQSQueue
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}-SQSQueueARN'
  SQSQueueURL:
    Description: SQSQueueURL of newly created SQS Queue
    Value: !Ref SQSQueue
    Export:
      Name: !Sub '${AWS::StackName}-SQSQueueURL'
  SQSVPCInterfaceEndpoint:
    Description: Interface Endpoint
    Value: !Ref InterfaceEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-SQSVPCInterfaceEndpoint'
  PrivateSubnet1ARouteTable:
    Description: PrivateSubnet1ARouteTable
    Value: !Ref PrivateSubnet1ARouteTable
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet1ARouteTable'
  PrivateSubnet2ARouteTable:
    Description: PrivateSubnet2ARouteTable
    Value: !Ref PrivateSubnet2ARouteTable
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet2ARouteTable'
  PublicSubnetRouteTable:
    Description: PublicSubnetRouteTable
    Value: !Ref PublicSubnetRouteTable
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetRouteTable'
  AWSAccountID:
    Description: 'AWS Account ID used for this lab'
    Value: !Sub '${AWS::AccountId}'
    Export:
      Name: !Sub '${AWS::StackName}-AWSAccountID' 
  keypairName:
    Description: 'Name of the Key pair whose public key was created on the EC2 instances'
    Value: vpce.pem
    Export:
     Name: !Sub '${AWS::StackName}-keypairName' 